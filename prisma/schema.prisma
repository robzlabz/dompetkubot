// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  telegramId  String   @unique
  username    String?
  firstName   String?
  lastName    String?
  language    String   @default("id")
  timezone    String   @default("Asia/Jakarta")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  expenses      Expense[]
  incomes       Income[]
  budgets       Budget[]
  categories    Category[]
  wallet        Wallet?
  conversations Conversation[]
  vouchers      Voucher[]
  memory        UserMemory?

  @@map("users")
}

model Expense {
  id                    Int           @id @default(autoincrement())
  expenseId             String        @unique
  userId                Int
  amount                Float
  description           String
  categoryId            Int
  calculationExpression String?
  receiptImageUrl       String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  items    ExpenseItem[]

  @@map("expenses")
}

model ExpenseItem {
  id         Int     @id @default(autoincrement())
  expenseId  Int
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float

  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("expense_items")
}

model Income {
  id          Int      @id @default(autoincrement())
  incomeId    String   @unique
  userId      Int
  amount      Float
  description String
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@map("incomes")
}

model Category {
  id        Int         @id @default(autoincrement())
  name      String
  type      CategoryType
  isDefault Boolean     @default(false)
  userId    Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]
  incomes  Income[]
  budgets  Budget[]

  @@map("categories")
}

model Budget {
  id         Int          @id @default(autoincrement())
  userId     Int
  categoryId Int
  amount     Float
  period     BudgetPeriod
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@map("budgets")
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  balance   Float    @default(0)
  coins     Float    @default(0) // Float to support fractional coins (e.g., 0.5 coins per transaction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Voucher {
  id        Int         @id @default(autoincrement())
  code      String      @unique
  type      VoucherType
  value     Float
  isUsed    Boolean     @default(false)
  usedBy    Int?
  usedAt    DateTime?
  expiresAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User? @relation(fields: [usedBy], references: [id])

  @@map("vouchers")
}

model UserMemory {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  data      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_memories")
}

model Conversation {
  id          Int         @id @default(autoincrement())
  userId      Int
  message     String
  role        MessageRole
  messageType MessageType
  toolUsed    String?
  coinsUsed   Float?
  tokensIn    Int?
  tokensOut   Int?
  createdAt   DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

enum CategoryType {
  EXPENSE
  INCOME
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum VoucherType {
  COINS
  BALANCE
  DISCOUNT
}

enum MessageType {
  TEXT
  VOICE
  PHOTO
}

enum ConversationType {
  EXPENSE_ENTRY
  INCOME_ENTRY
  BUDGET_SETUP
  GENERAL_QUERY
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}
